import serial
import time

# === CONFIGURACI√ìN DEL PUERTO SERIAL ===
puerto = 'COM5'      # Cambiar seg√∫n tu sistema
baudrate = 9600
timeout = 1           # En segundos, no milisegundos

try:
    arduino = serial.Serial(port=puerto, baudrate=baudrate, timeout=timeout)
    time.sleep(2)  # Esperar a que se estabilice la conexi√≥n
    print(f"‚úÖ Conectado a {puerto} a {baudrate} bps.")
except Exception as e:
    print(f"‚ùå No se pudo abrir el puerto {puerto}. Error: {e}")
    exit()

def comunicacion_serial():
    try:
        while True:
            print("\nOpciones:")
            print("1. Enviar nuevo Tss y Mp")
            print("2. Leer datos del Arduino")
            print("3. Salir")
            opcion = input("Eleg√≠ una opci√≥n: ")

            if opcion == "1":
                try:
                    Tss = float(input("Ingres√° el nuevo valor de Tss: "))
                    Mp  = float(input("Ingres√° el nuevo valor de Mp: "))
                    comando = f"{Tss:.3f},{Mp:.3f}\n"
                    arduino.write(comando.encode())
                    print(f"üì§ Enviado: {comando.strip()}")
                except ValueError:
                    print("‚ö†Ô∏è Error: Tss y Mp deben ser n√∫meros v√°lidos.")

            elif opcion == "2":
                print("üì• Esperando datos del Arduino (Ctrl+C para cancelar)...")
                try:
                    while True:
                        if arduino.in_waiting:
                            linea = arduino.readline().decode(errors='ignore').strip()
                            if linea:
                                print("Arduino:", linea)
                        else:
                            time.sleep(0.1)
                except KeyboardInterrupt:
                    print("‚èπÔ∏è Lectura interrumpida por el usuario.")

            elif opcion == "3":
                print("üîå Cerrando conexi√≥n...")
                break

            else:
                print("‚ùå Opci√≥n inv√°lida. Eleg√≠ 1, 2 o 3.")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Interrumpido por el usuario.")

    finally:
        if arduino.is_open:
            arduino.close()
            print("üîí Puerto cerrado.")

comunicacion_serial()
